<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sol.squid.review.ReviewMapper">

	<select id="getAllReviews" parameterType="Map" resultType="com.sol.squid.review.Review">
		select *
		from (
			select rownum as rn, rv_no, rv_u_id, rv_title, rv_date, rv_rest_name, rv_rest_addr, rv_content, rv_score, rv_views
			from (
				select * from user_info, review
				where rv_u_id = u_id
				order by rv_no desc
			)
		) 
		where rn &gt;= #{start} and rn &lt;= #{end}
	</select>
	
	<insert id="regReview" parameterType="com.sol.squid.review.Review">
		insert into review values(review_seq.nextval, #{rv_u_id}, #{rv_title}, sysdate, #{rv_rest_name}, #{rv_rest_addr}, #{rv_content}, #{rv_score}, 0)
	</insert>
	
	<update id="plusView" parameterType="com.sol.squid.review.Review">
		update review set rv_views = rv_views + 1 where rv_no = #{rv_no}
	</update>
	
	<select id="searchReview" parameterType="Map" resultType="com.sol.squid.review.Review">
		<choose>
			<when test="what == 1">
				select * from review where rv_u_id like '%'||#{search}||'%' order by rv_no desc		
			</when>
			<when test="what == 2">
				select * from review where rv_rest_name like '%'||#{search}||'%' order by rv_no desc
			</when>
			<otherwise>
				select * from review where rv_title like '%'||#{search}||'%' order by rv_no desc			
			</otherwise>
		</choose>
	</select>
		
	<select id="getReview" resultType="com.sol.squid.review.Review">
		select * from review where rv_no = #{rv_no } 
	</select>
		
	<delete id="deleteReview" parameterType="com.sol.squid.review.Review">
		delete review where rv_no = #{rv_no }
	</delete>
		
	<update id="updateReview" parameterType="com.sol.squid.review.Review">
		update review set rv_title=#{rv_title}, rv_rest_name=#{rv_rest_name}, rv_rest_addr=#{rv_rest_addr}, rv_content=#{rv_content} where rv_no=#{rv_no}
	</update>
		
	<insert id="regComment" parameterType="com.sol.squid.review.Comment">
		insert into review_comment values(review_commnet_seq.nextval, #{rc_rv_no}, #{rc_u_id}, sysdate, #{rc_content})
	</insert>
		
	<select id="getComment" resultType="com.sol.squid.review.Comment">
		select * from review_comment order by rc_no desc
	</select>
		
	<delete id="deleteComment" parameterType="com.sol.squid.review.Comment">
		delete review_comment where rc_no = #{rc_no}
	</delete>
	
	<select id="getCountReview" resultType="java.lang.Integer">
		select count(*) from review
	</select>
	
	<select id="getReviews" resultType="com.sol.squid.review.Review">
		select * 
		from (
				select rownum as rn, rv_no, rv_u_id, rv_title, rv_date, rv_rest_name, rv_rest_addr, rv_content, rv_score, rv_views 
				from (select * from review order by rv_no desc)
			)
		where rn &lt;= 3
	</select>
		
</mapper>